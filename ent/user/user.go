// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldTgid holds the string denoting the tgid field in the database.
	FieldTgid = "tgid"
	// FieldCustomCode holds the string denoting the customcode field in the database.
	FieldCustomCode = "custom_code"
	// FieldAdmin holds the string denoting the admin field in the database.
	FieldAdmin = "admin"
	// FieldReadAll holds the string denoting the readall field in the database.
	FieldReadAll = "read_all"
	// EdgeRecords holds the string denoting the records edge name in mutations.
	EdgeRecords = "records"
	// Table holds the table name of the user in the database.
	Table = "users"
	// RecordsTable is the table that holds the records relation/edge.
	RecordsTable = "records"
	// RecordsInverseTable is the table name for the Record entity.
	// It exists in this package in order to avoid circular dependency with the "record" package.
	RecordsInverseTable = "records"
	// RecordsColumn is the table column denoting the records relation/edge.
	RecordsColumn = "user_records"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldTgid,
	FieldCustomCode,
	FieldAdmin,
	FieldReadAll,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// DefaultCustomCode holds the default value on creation for the "customCode" field.
	DefaultCustomCode bool
	// DefaultAdmin holds the default value on creation for the "admin" field.
	DefaultAdmin bool
	// DefaultReadAll holds the default value on creation for the "readAll" field.
	DefaultReadAll bool
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByTgid orders the results by the tgid field.
func ByTgid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTgid, opts...).ToFunc()
}

// ByCustomCode orders the results by the customCode field.
func ByCustomCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomCode, opts...).ToFunc()
}

// ByAdmin orders the results by the admin field.
func ByAdmin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdmin, opts...).ToFunc()
}

// ByReadAll orders the results by the readAll field.
func ByReadAll(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReadAll, opts...).ToFunc()
}

// ByRecordsCount orders the results by records count.
func ByRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecordsStep(), opts...)
	}
}

// ByRecords orders the results by records terms.
func ByRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecordsTable, RecordsColumn),
	)
}
